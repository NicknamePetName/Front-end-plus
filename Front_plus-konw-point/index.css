/* CSS伪元素————::after/::before */
/* before */
选择器::before {
  /* 使用空白符号占位 */
  content: '';
}

/* after */
选择器::after {
  /* 使用空白符号占位 */
  content: '';
}


/* CSS伪类————清除浮动 */
.clearfix::after {
  content: '';
  display: block;
  clear: both;
}

/* CSS伪类————事件伪类 更多知识点2.3 */
li:hover {
  background-color: #47A0FC;
  color: white;
}

/* active————鼠标点击时 */
/*  正确 
  a:hover{}    hover必须在active之前
  a:active{}   active:鼠标点击时的效果，在超链接中常见，（注：点击鼠标不松开）
  a:focus{}
    错误 
  a:active{}
  a:hover{} */
/* focus————获取焦点后 */
/* focus:获取焦点的伪类，一般用于具有焦点的元素，比如input，可以让input获取到焦点后，改变input的边框颜色 */

/* CSS伪类--列表伪类 */
a:first-child {
  /* 匹配其父元素中的第一个子元素 */
  margin: 0;
}

a:last-child {
  /* 匹配其父元素中的最后一个子元素 */
  margin: auto;
}

a:nth-child(n) {
  /* 匹配其父元素中的第n个子元素 */
  margin: auto;
  /* 括号里除了写数字还可以写两个特定的单词odd(奇数),even(偶数) */
}



p {
  cursor: pointer;
  /* cursor 鼠标箭头的变化 */
  /* 手指，食指 */
  cursor: default;
  /* 默认鼠标箭头 */
  cursor: text;
  /* 光标 */
  cursor: move;
  /* 方向键盘 */
  cursor: grab;
  /* 手掌，(布) */
  cursor: zoom-in;
  /* 放大 */
  cursor: zoom-out;
  /* 缩小 */
}


/* 3.2 CSS装饰--box-shadow*(盒子阴影)/text-shadow(文字阴影) */
p {
  /* x 偏移量 | y 偏移量 | 阴影颜色 */
  box-shadow: 60px -16px teal;

  /* x 偏移量 | y 偏移量 | 阴影模糊半径 | 阴影颜色 */
  box-shadow: 10px 5px 5px black;

  /* x 偏移量 | y 偏移量 | 阴影模糊半径 | 阴影扩散半径 | 阴影颜色 */
  box-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.2);

  /* 插页 (阴影向内) | x 偏移量 | y 偏移量 | 阴影颜色 */
  box-shadow: inset 5em 1em gold;

  /* 任意数量的阴影，以逗号分隔 */
  box-shadow: 3px 3px red, -1em 0 0.4em olive;

  /* 全局关键字 */
  box-shadow: inherit;
  box-shadow: initial;
  box-shadow: unset;



  /* offset-x | offset-y | blur-radius 阴影模糊半径 | color */
  text-shadow: 1px 1px 2px black;

  /* color | offset-x | offset-y | blur-radius */
  text-shadow: #fc0 1px 0 10px;

  /* offset-x | offset-y | color */
  text-shadow: 5px 5px #558abb;

  /* color | offset-x | offset-y */
  text-shadow: white 2px 5px;

  /* offset-x | offset-y
/* Use defaults for color and blur-radius */
  text-shadow: 5px 10px;

  /* Global values 全局关键字 */
  text-shadow: inherit;
  text-shadow: initial;
  text-shadow: unset;
}

/*4.2 CSS Flex布局 */
.container {
  display: flex;
  /* flex:它最显著的效果就是把原本从上到下排列的块状元素变成水平排列 */
  /* 注：设为Flex布局以后，第一代子元素的float、clear、vertical-align属性将失效 */
  /* 采用Flex布局的元素，称为Flex容器，简称"容器",它的所有子元素成为Flex项目，简称"项目" */
}

/* 4.2 justify-content(控制水平方向分布) 和 align-items(控制垂直方向分布) */
.container {
  /* justify-content:有六个有效值： */
  justify-content: flex-start ;      /* 项目向水平方向的起点对齐 */
  justify-content: flex-end;         /* 项目向水平方向的终点对齐 */
  justify-content: center;           /* 项目在水平方向上局中 */
  justify-content: space-between;    /* 在每行上均匀分配项目,相邻项目间距离相同 （#| x | x |#） */
  justify-content: space-around;     /* 在每行上均匀分配项目 （# x |  2x  |  2x  | x #）      */
  justify-content: space-evenly;     /* 在每行上均匀分配项目,各行间距相同（# x | x | x | x #） */


  /* align-items:有五个有效值 */
  align-items: flex-start;           /* 项目向垂直方向的起点对齐 */
  align-items: flex-end;             /* 项目向垂直方向的终点对齐 */
  align-items: center;               /* 项目在垂直方向居中 */
  align-items: stretch;              /* 项目在垂直方向被拉伸到与容器相同的高度或宽度 */
  align-items: baseline;             /* 按项目的第一行文字的基线*对齐 */

}

/* 4.3 flex-wrap 定义项目是否换行，如何换行 */
.container {
  display: flex;
  /* flex-wrap: 有三个取值 */
  flex-wrap: nowrap;                 /* 默认值，不换行 */
  flex-wrap: wrap;                   /* 换行，第一行在上方 */
  flex-wrap: wrap-reverse;           /* 换行，第一行在下方 */
 
}
/* flex:none 不允许项目放大压缩和 flex:1 项目自动充满剩余空间*/

/* flex-direction 改变容器中主轴和交叉轴的方向 */
.container {
  /* flex-direction: 有四个有效值 */
  flex-direction: row;              /* 默认值，主轴为水平方向，起点在左端 */
  flex-direction: row-reverse;      /* 主轴在水平方向，起点在右端 */
  flex-direction: column;           /* 主轴为垂直方向，起点在上沿 */
  flex-direction: column-reverse;   /* 主轴为垂直方向，起点在下沿 */
    /* 默认情况：justify-content控制水平方向，align-items控制垂直方向
     设置了flex-direction:justify-content控制垂直方向，align-items控制水平方向 */
}


/* 5.1 单行文本超出省略 */
.container {
  /* 1.强制不换行  */
  white-space: nowrap;  /* html5推荐使用 */

  /* 2.元素内容溢出 overflow有5个有效值*/
  overflow: visible;   /* 默认值。内容不会被修剪，会呈现在元素之外 */
  overflow: hidden;    /* 内容会被修剪，并且超出的内容不可见 */
  overflow: inherit;   /* 规定应该从父元素继承overflow属性的值 */
  overflow: scroll;    /* 内容会被修剪，浏览器会显示滚动条以便查看超出内容 */
  overflow: auto;      /* 由浏览器定夺，如果内容被修剪，就显示滚动条 */

  /* 3.文本溢出shenglue */
  text-overflow: clip;  /* 默认值，表示在内容区域的极限处截断文本，可以简单的理解成超出部分被一刀切掉了 */
  text-overflow: ellipsis;/* 表示用一个省略号（“……”）来表示被截断的文本 */
}
/* 5.2 多行文本超出省略 */
.container {
  /* 隐藏超出部分 */
overflow : hidden;
/* 文本超出就用省略号 */
text-overflow: ellipsis;
/* 把对象作为弹性伸缩盒子模型显示 */
display: -webkit-box;
/* WebKit内核的浏览器的私有属性，设置文本超出2行就用省略号 */
-webkit-line-clamp: 2;
/* WebKit内核的浏览器的私有属性，设置或检索伸缩盒对象的子元素的排列方式 */
-webkit-box-orient: vertical;
}











